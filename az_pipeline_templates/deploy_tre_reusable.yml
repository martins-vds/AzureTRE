# deploy_tre_reusable.yml
parameters:
  - name: ciGitRef
    displayName: Git reference
    type: string
    default: ''
  - name: environmentName
    displayName: Environment name
    type: string
    default: ''
  - name: e2eTestsCustomSelector
    displayName: E2E tests custom selector
    type: string
    default: ''
  - name: DEVCONTAINER_TAG
    displayName: Devcontainer tag
    type: string
    default: 'latest'
  - name: AAD_TENANT_ID
    displayName: AAD tenant ID
    type: string
    default: ''
  - name: ACR_NAME
    displayName: ACR name
    type: string
    default: ''
  - name: AZURE_CREDENTIALS
    displayName: Azure credentials
    type: string
    default: ''
  - name: API_CLIENT_ID
    displayName: API client ID
    type: string
    default: ''
  - name: API_CLIENT_SECRET
    displayName: API client secret
    type: string
    default: ''
  - name: APPLICATION_ADMIN_CLIENT_ID
    displayName: Application admin client ID
    type: string
    default: ''
  - name: APPLICATION_ADMIN_CLIENT_SECRET
    displayName: Application admin client secret
    type: string
    default: ''
  - name: MGMT_RESOURCE_GROUP_NAME
    displayName: Management resource group name
    type: string
    default: ''
  - name: MS_TEAMS_WEBHOOK_URI
    displayName: MS Teams webhook URI
    type: string
    default: ''
  - name: MGMT_STORAGE_ACCOUNT_NAME
    displayName: Management storage account name
    type: string
    default: ''
  - name: SWAGGER_UI_CLIENT_ID
    displayName: Swagger UI client ID
    type: string
    default: ''
  - name: TEST_APP_ID
    displayName: Test app ID
    type: string
    default: ''
  - name: TEST_WORKSPACE_APP_ID
    displayName: Test workspace app ID
    type: string
    default: ''
  - name: TEST_WORKSPACE_APP_SECRET
    displayName: Test workspace app secret
    type: string
    default: ''
  - name: TEST_ACCOUNT_CLIENT_ID
    displayName: Test account client ID
    type: string
    default: ''
  - name: TEST_ACCOUNT_CLIENT_SECRET
    displayName: Test account client secret
    type: string
    default: ''
  - name: TRE_ID
    displayName: TRE ID
    type: string
    default: ''
  - name: CI_CACHE_ACR_NAME
    displayName: CI cache ACR name
    type: string
    default: ''
  - name: LOCATION
    displayName: Location
    type: string
    default: ''
  - name: AZURE_ENVIRONMENT
    displayName: Azure environment
    type: string
    default: 'AzureCloud'
  - name: prRef
    displayName: Pull request reference
    type: string
    default: ''
  - name: prHeadSha
    displayName: Pull request head SHA
    type: string
    default: ''
  - name: TEST_USER_NAME
    displayName: Test user name
    type: string
    default: ''
  - name: TEST_USER_PASSWORD
    displayName: Test user password
    type: string
    default: ''
  - name: TERRAFORM_STATE_CONTAINER_NAME
    displayName: Terraform state container name
    type: string
    default: 'tfstate'
  - name: SUBSCRIPTION_ID
    displayName: Subscription ID
    type: string
    default: ''
  - name: RP_BUNDLE_VALUES
    displayName: RP bundle values
    type: string
    default: '{}'
  - name: TF_LOG
    displayName: Terraform log level
    type: string
    default: ''
  - name: BUNDLES
    displayName: Bundles
    type: object
    default: {}
  - name: SHARED_BUNDLES
    displayName: Shared bundles
    type: object
    default: {}
  - name: USER_RESOURCE_BUNDLES
    displayName: User resource bundles
    type: object
    default: {}
  - name: E2E_TESTS_NUMBER_PROCESSES
    displayName: Number of processes for e2e tests
    type: string
    default: ''
  - name: WORKSPACE_APP_SERVICE_PLAN_SKU
    displayName: Workspace app service plan SKU
    type: string
    default: 'P1v2'
  - name: RESOURCE_PROCESSOR_NUMBER_PROCESSES_PER_INSTANCE
    displayName: Resource processor number of processes per instance
    type: number
    default: '5'
  - name: ENABLE_SWAGGER
    displayName: Enable Swagger
    type: string
    default: 'false'
    values:
      - 'true'
      - 'false'
  - name: CORE_ADDRESS_SPACE
    displayName: Core address space
    type: string
    default: '10.0.0.0/22'
  - name: CORE_APP_SERVICE_PLAN_SKU
    displayName: Core app service plan SKU
    type: string
    default: 'P1v2'
    values:
      - 'P1v2'
  - name: TRE_ADDRESS_SPACE
    displayName: TRE address space
    type: string
    default: '10.0.0.0/16'
jobs:
- job: deploy_management
  displayName: Deploy management
  pool:
    vmImage: ubuntu-latest
  steps:
  - bash: |
      echo "Inputs"
      echo "======"
      echo "prRef       : ${{ parameters.prRef }}"
      echo "prRHeadSha  : ${{ parameters.prHeadSha }}"
      echo "ciGitRef    : ${{ parameters.ciGitRef }}"
      echo "environment : ${{ parameters.environmentName }}"
  - bash: |
      if [ "${{ parameters.AAD_TENANT_ID }}" == '' ]; then
        echo "Missing secret: AAD_TENANT_ID" && exit 1
      fi
      if [ "${{ parameters.ACR_NAME }}" == '' ]; then
        echo "Missing secret: ACR_NAME" && exit 1
      fi
      if [ "${{ parameters.API_CLIENT_ID }}" == '' ]; then
        echo "Missing secret: API_CLIENT_ID" && exit 1
      fi
      if [ "${{ parameters.API_CLIENT_SECRET }}" == '' ]; then
        echo "Missing secret: API_CLIENT_SECRET" && exit 1
      fi
      if [ "${{ parameters.APPLICATION_ADMIN_CLIENT_ID }}" == '' ]; then
        echo "Missing secret: APPLICATION_ADMIN_CLIENT_ID" && exit 1
      fi
      if [ "${{ parameters.APPLICATION_ADMIN_CLIENT_SECRET }}" == '' ]; then
        echo "Missing secret: APPLICATION_ADMIN_CLIENT_SECRET" && exit 1
      fi
      if [ "${{ parameters.MGMT_RESOURCE_GROUP_NAME }}" == '' ]; then
        echo "Missing secret: MGMT_RESOURCE_GROUP_NAME" && exit 1
      fi
      if [ "${{ parameters.MGMT_STORAGE_ACCOUNT_NAME }}" == '' ]; then
        echo "Missing secret: MGMT_STORAGE_ACCOUNT_NAME" && exit 1
      fi
      if [ "${{ parameters.SWAGGER_UI_CLIENT_ID }}" == '' ]; then
        echo "Missing secret: SWAGGER_UI_CLIENT_ID" && exit 1
      fi
      if [ "${{ parameters.TEST_APP_ID }}" == '' ]; then
        echo "Missing secret: TEST_APP_ID" && exit 1
      fi
      if [ "${{ parameters.TEST_WORKSPACE_APP_ID }}" == '' ]; then
        echo "Missing secret: TEST_WORKSPACE_APP_ID" && exit 1
      fi
      if [ "${{ parameters.TEST_WORKSPACE_APP_SECRET }}" == '' ]; then
        echo "Missing secret: TEST_WORKSPACE_APP_SECRET" && exit 1
      fi
      if [ "${{ parameters.TEST_ACCOUNT_CLIENT_ID }}" == '' ]; then
        echo "Missing secret: TEST_ACCOUNT_CLIENT_ID" && exit 1
      fi
      if [ "${{ parameters.TEST_ACCOUNT_CLIENT_SECRET }}" == '' ]; then
        echo "Missing secret: TEST_ACCOUNT_CLIENT_SECRET" && exit 1
      fi
      if [ "${{ parameters.TRE_ID }}" == '' ]; then
        echo "Missing secret: TRE_ID" && exit 1
      fi
      if [ "${{ parameters.AZURE_CREDENTIALS }}" == '' ]; then
        echo "Missing secret: AZURE_CREDENTIALS" && exit 1
      fi
      if [ "${{ parameters.DEVCONTAINER_TAG }}" == '' ]; then
        echo "Missing input: DEVCONTAINER_TAG" && exit 1
      fi
      if [ "${{ parameters.LOCATION }}" == '' ]; then
        echo "Missing variable: LOCATION" && exit 1
      fi

  - checkout: self
    clean: "true"
    persistCredentials: "false"

  - task: AzureCLI@2
    name: ci_cache_cr_login
    displayName: Login to CI cache ACR
    continueOnError: true
    inputs:
      azureSubscription: ${{ parameters.AZURE_CREDENTIALS }}
      scriptType: 'bash'
      scriptLocation: 'scriptPath'
      scriptPath: 'devops/scripts/login_acr.sh'
      arguments: '${{ parameters.CI_CACHE_ACR_NAME }}'

  - task: AzureCLI@2
    displayName: Build Devcontainer
    name: build_devcontainer
    inputs:
      azureSubscription: ${{ parameters.AZURE_CREDENTIALS }}
      scriptType: 'bash'
      scriptLocation: 'scriptPath'
      scriptPath: 'devops/scripts/build_devcontainer.sh'
      arguments: '"${{ parameters.CI_CACHE_ACR_NAME }}" "$(ci_cache_cr_login.outcome)" "${{ parameters.DEVCONTAINER_TAG }}"'

  - template: devcontainer_run_command.yml
    parameters:
      DISPLAY_NAME: 'Deploy management'
      COMMAND: "make bootstrap mgmt-deploy"
      DEVCONTAINER_TAG: ${{ parameters.DEVCONTAINER_TAG }}
      CI_CACHE_ACR_NAME: ${{ parameters.CI_CACHE_ACR_NAME}}
      AZURE_CREDENTIALS: ${{ parameters.AZURE_CREDENTIALS }}
      AZURE_ENVIRONMENT: ${{ parameters.AZURE_ENVIRONMENT }}
      TRE_ID: ${{ parameters.TRE_ID }}
      LOCATION: ${{ parameters.LOCATION }}
      ACR_NAME: ${{ parameters.ACR_NAME }}
      TERRAFORM_STATE_CONTAINER_NAME: ${{ parameters.TERRAFORM_STATE_CONTAINER_NAME }}
      MGMT_RESOURCE_GROUP_NAME: ${{ parameters.MGMT_RESOURCE_GROUP_NAME }}
      MGMT_STORAGE_ACCOUNT_NAME: ${{ parameters.MGMT_STORAGE_ACCOUNT_NAME }}
      SUBSCRIPTION_ID: ${{ parameters.SUBSCRIPTION_ID }}

  - task: AzureCLI@2
    displayName: ACR Login
    condition: eq(variables['ci_cache_cr_login.outcome'], 'success')
    inputs:
      azureSubscription: ${{ parameters.AZURE_CREDENTIALS }}
      scriptType: 'bash'
      scriptLocation: 'inlineScript'
      inlineScript: |
        # shellcheck disable=SC2034,SC2015,SC2125
        for i in {1..3}; do
          az acr login --name "${{ parameters.CI_CACHE_ACR_NAME }}" && ec=0 && break || ec=$? && sleep 10
        done
        # shellcheck disable=SC2242
        (exit $ec)

  - task: Bash@3
    displayName: Push cached devcontainer
    inputs:
      targetType: 'inline'
      script: |
        docker image push $(build_devcontainer.CI_CACHE_ACR_URI)/tredev:${{ parameters.DEVCONTAINER_TAG }}
- job: build_core_images
  dependsOn: [deploy_management]
  displayName: Build core images
  pool:
    vmImage: ubuntu-latest
  strategy:
    matrix:
      build-and-push-api:
        target: 'build-and-push-api'
      build-and-push-resource-processor:
        target: 'build-and-push-resource-processor'
      build-and-push-airlock-processor:
        target: 'build-and-push-airlock-processor'
  steps:
    - checkout: self
      clean: "true"
      persistCredentials: "false"

    - template: devcontainer_run_command.yml
      parameters:
        DISPLAY_NAME: 'Docker Build'
        COMMAND: "make $(target)"
        DEVCONTAINER_TAG: ${{ parameters.DEVCONTAINER_TAG }}
        CI_CACHE_ACR_NAME: ${{ parameters.CI_CACHE_ACR_NAME}}
        AZURE_CREDENTIALS: ${{ parameters.AZURE_CREDENTIALS }}
        AZURE_ENVIRONMENT: ${{ parameters.AZURE_ENVIRONMENT }}
        ACR_NAME: ${{ parameters.ACR_NAME }}
        LOCATION: ${{ parameters.LOCATION }}

- job: start_tre
  displayName: Start TRE
  dependsOn: [deploy_management]
  pool:
    vmImage: ubuntu-latest
  steps:
    - checkout: self
      clean: "true"
      persistCredentials: "false"

    - template: devcontainer_run_command.yml
      parameters:
        DISPLAY_NAME: 'Start TRE'
        COMMAND: "make tre-start"
        DEVCONTAINER_TAG: ${{ parameters.DEVCONTAINER_TAG }}
        CI_CACHE_ACR_NAME: ${{ parameters.CI_CACHE_ACR_NAME}}
        AZURE_CREDENTIALS: ${{ parameters.AZURE_CREDENTIALS }}
        AZURE_ENVIRONMENT: ${{ parameters.AZURE_ENVIRONMENT }}
        TRE_ID: ${{ parameters.TRE_ID }}
        LOCATION: ${{ parameters.LOCATION }}

- job: deploy_tre
  displayName: Deploy TRE
  dependsOn: [start_tre, build_core_images]
  pool:
    vmImage: ubuntu-latest
  steps:
    - checkout: self
      clean: "true"
      persistCredentials: "false"

    - template: devcontainer_run_command.yml
      parameters:
        DISPLAY_NAME: 'Deploy TRE Core'
        COMMAND: "TF_VAR_ci_git_ref=${{ parameters.ciGitRef }} TF_LOG=${{ parameters.TF_LOG }} make deploy-core"
        DEVCONTAINER_TAG: ${{ parameters.DEVCONTAINER_TAG }}
        CI_CACHE_ACR_NAME: ${{ parameters.CI_CACHE_ACR_NAME}}
        AZURE_CREDENTIALS: ${{ parameters.AZURE_CREDENTIALS }}
        AZURE_ENVIRONMENT: ${{ parameters.AZURE_ENVIRONMENT }}
        API_CLIENT_ID: "${{ parameters.API_CLIENT_ID }}"
        AAD_TENANT_ID: "${{ parameters.AAD_TENANT_ID }}"
        TRE_ID: ${{ parameters.TRE_ID }}
        LOCATION: ${{ parameters.LOCATION }}
        ACR_NAME: ${{ parameters.ACR_NAME }}
        TERRAFORM_STATE_CONTAINER_NAME: ${{ parameters.TERRAFORM_STATE_CONTAINER_NAME }}
        MGMT_RESOURCE_GROUP_NAME: ${{ parameters.MGMT_RESOURCE_GROUP_NAME }}
        MGMT_STORAGE_ACCOUNT_NAME: ${{ parameters.MGMT_STORAGE_ACCOUNT_NAME }}
        CORE_ADDRESS_SPACE: ${{ parameters.CORE_ADDRESS_SPACE }}
        TRE_ADDRESS_SPACE: ${{ parameters.TRE_ADDRESS_SPACE }}
        ENABLE_SWAGGER: "${{ parameters.ENABLE_SWAGGER }}"
        SWAGGER_UI_CLIENT_ID: "${{ parameters.SWAGGER_UI_CLIENT_ID }}"
        API_CLIENT_SECRET: "${{ parameters.API_CLIENT_SECRET }}"
        APPLICATION_ADMIN_CLIENT_ID: "${{ parameters.APPLICATION_ADMIN_CLIENT_ID }}"
        APPLICATION_ADMIN_CLIENT_SECRET: "${{ parameters.APPLICATION_ADMIN_CLIENT_SECRET }}"
        #STATEFUL_RESOURCES_LOCKED: "${{ github.ref == 'refs/heads/main' && inputs.prRef == '' && true || false }}"
        ${{ if and(eq(parameters.ciGitRef, 'refs/heads/main'),eq(parameters.prRef, '')) }}:
          STATEFUL_RESOURCES_LOCKED: 'true'
        ${{ else }}:
          STATEFUL_RESOURCES_LOCKED: 'false'
        CORE_APP_SERVICE_PLAN_SKU: ${{ parameters.CORE_APP_SERVICE_PLAN_SKU }}
        RESOURCE_PROCESSOR_NUMBER_PROCESSES_PER_INSTANCE: ${{ parameters.RESOURCE_PROCESSOR_NUMBER_PROCESSES_PER_INSTANCE }}
        RP_BUNDLE_VALUES: "${{ parameters.RP_BUNDLE_VALUES }}"
        SUBSCRIPTION_ID: ${{ parameters.SUBSCRIPTION_ID }}

    # - template: devcontainer_run_command.yml
    #   parameters:
    #     DISPLAY_NAME: 'API Health Check'
    #     COMMAND: "make api-healthcheck"
    #     DEVCONTAINER_TAG: ${{ parameters.DEVCONTAINER_TAG }}
    #     CI_CACHE_ACR_NAME: ${{ parameters.CI_CACHE_ACR_NAME }}
    #     AZURE_CREDENTIALS: ${{ parameters.AZURE_CREDENTIALS }}
    #     AZURE_ENVIRONMENT: ${{ parameters.AZURE_ENVIRONMENT }}
    #     TRE_ID: ${{ parameters.TRE_ID }}
    #     LOCATION: ${{ parameters.LOCATION }}
    #     SUBSCRIPTION_ID: ${{ parameters.SUBSCRIPTION_ID }}

- job: publish_bundles
  displayName: Publish bundles
  dependsOn: [deploy_management]
  pool:
    vmImage: ubuntu-latest
  strategy:
    matrix:
      ${{ each bundle in parameters.BUNDLES }}:
        ${{ bundle.BUNDLE_NAME }}:
          BUNDLE_DIR: ${{ bundle.BUNDLE_DIR }}
          BUNDLE_TYPE: ${{ bundle.BUNDLE_TYPE }}
          BUNDLE_NAME: ${{ bundle.BUNDLE_NAME }}
      ${{ each bundle in parameters.USER_RESOURCE_BUNDLES }}:
        ${{ bundle.BUNDLE_NAME }}:
          BUNDLE_DIR: ${{ bundle.BUNDLE_DIR }}
          BUNDLE_TYPE: ${{ bundle.BUNDLE_TYPE }}
          BUNDLE_NAME: ${{ bundle.BUNDLE_NAME }}
  steps:
    - checkout: self
      clean: "true"
      persistCredentials: "false"

    - template: devcontainer_run_command.yml
      parameters:
        DISPLAY_NAME: 'Publish bundle - $(BUNDLE_NAME)'
        COMMAND: >-
          for i in {1..3}; do make bundle-build bundle-publish DIR=$(BUNDLE_DIR)
          && ec=0 && break || ec=\$? && sleep 30; done; (exit \$ec)
        DEVCONTAINER_TAG: ${{ parameters.DEVCONTAINER_TAG }}
        AZURE_CREDENTIALS: ${{ parameters.AZURE_CREDENTIALS }}
        AZURE_ENVIRONMENT: ${{ parameters.AZURE_ENVIRONMENT }}
        CI_CACHE_ACR_NAME: ${{ parameters.CI_CACHE_ACR_NAME}}
        ACR_NAME: ${{ parameters.ACR_NAME }}
        SUBSCRIPTION_ID: ${{ parameters.SUBSCRIPTION_ID }}

- job: publish_shared_bundles
  displayName: Publish shared bundles
  dependsOn: [deploy_management]
  pool:
    vmImage: ubuntu-latest
  strategy:
    matrix:
      ${{ each bundle in parameters.SHARED_BUNDLES }}:
        ${{ bundle.BUNDLE_NAME }}:
          BUNDLE_DIR: ${{ bundle.BUNDLE_DIR }}
          BUNDLE_TYPE: ${{ bundle.BUNDLE_TYPE }}
          BUNDLE_NAME: ${{ bundle.BUNDLE_NAME }}
  steps:
    - checkout: self
      clean: "true"
      persistCredentials: "false"

    - template: devcontainer_run_command.yml
      parameters:
        DISPLAY_NAME: 'Publish shared bundle - $(BUNDLE_NAME)'
        COMMAND: >-
          for i in {1..3}; do make bundle-build bundle-publish DIR=$(BUNDLE_DIR)
          && ec=0 && break || ec=\$? && sleep 30; done; (exit \$ec)
        DEVCONTAINER_TAG: ${{ parameters.DEVCONTAINER_TAG }}
        AZURE_CREDENTIALS: ${{ parameters.AZURE_CREDENTIALS }}
        AZURE_ENVIRONMENT: ${{ parameters.AZURE_ENVIRONMENT }}
        CI_CACHE_ACR_NAME: ${{ parameters.CI_CACHE_ACR_NAME}}
        ACR_NAME: ${{ parameters.ACR_NAME }}
        SUBSCRIPTION_ID: ${{ parameters.SUBSCRIPTION_ID }}

- job: register_shared_bundles
  displayName: Register shared bundles
  dependsOn: [publish_shared_bundles, deploy_tre]
  pool:
    vmImage: ubuntu-latest
  strategy:
    matrix:
      ${{ each bundle in parameters.SHARED_BUNDLES }}:
        ${{ bundle.BUNDLE_NAME }}:
          BUNDLE_DIR: ${{ bundle.BUNDLE_DIR }}
          BUNDLE_TYPE: ${{ bundle.BUNDLE_TYPE }}
          BUNDLE_NAME: ${{ bundle.BUNDLE_NAME }}
  steps:
    - checkout: self
      clean: "true"
      persistCredentials: "false"

    - template: devcontainer_run_command.yml
      parameters:
        DISPLAY_NAME: 'Register shared bundles - $(BUNDLE_NAME)'
        COMMAND: >-
          for i in {1..3}; do make bundle-register DIR=$(BUNDLE_DIR)
          && ec=0 && break || ec=\$? && sleep 10; done; (exit \$ec)
        DEVCONTAINER_TAG: ${{ parameters.DEVCONTAINER_TAG }}
        CI_CACHE_ACR_NAME: ${{ parameters.CI_CACHE_ACR_NAME}}
        AZURE_CREDENTIALS: ${{ parameters.AZURE_CREDENTIALS }}
        AZURE_ENVIRONMENT: ${{ parameters.AZURE_ENVIRONMENT }}
        ACR_NAME: ${{ parameters.ACR_NAME }}
        API_CLIENT_ID: "${{ parameters.API_CLIENT_ID }}"
        AAD_TENANT_ID: "${{ parameters.AAD_TENANT_ID }}"
        TEST_APP_ID: "${{ parameters.TEST_APP_ID }}"
        TEST_ACCOUNT_CLIENT_ID: "${{ parameters.TEST_ACCOUNT_CLIENT_ID }}"
        TEST_ACCOUNT_CLIENT_SECRET: "${{ parameters.TEST_ACCOUNT_CLIENT_SECRET }}"
        TRE_ID: ${{ parameters.TRE_ID }}
        LOCATION: ${{ parameters.LOCATION }}
        SUBSCRIPTION_ID: ${{ parameters.SUBSCRIPTION_ID }}
        BUNDLE_TYPE: $(BUNDLE_TYPE)

- job: register_bundles
  displayName: Register bundles
  dependsOn: [publish_bundles, deploy_tre]
  pool:
    vmImage: ubuntu-latest
  strategy:
    matrix:
      ${{ each bundle in parameters.BUNDLES }}:
        ${{ bundle.BUNDLE_NAME }}:
          BUNDLE_DIR: ${{ bundle.BUNDLE_DIR }}
          BUNDLE_TYPE: ${{ bundle.BUNDLE_TYPE }}
          BUNDLE_NAME: ${{ bundle.BUNDLE_NAME }}
  steps:
    - checkout: self
      clean: "true"
      persistCredentials: "false"

    - template: devcontainer_run_command.yml
      parameters:
        DISPLAY_NAME: 'Register bundles - $(BUNDLE_NAME)'
        COMMAND: >-
          for i in {1..3}; do make bundle-register DIR=$(BUNDLE_DIR)
          && ec=0 && break || ec=\$? && sleep 10; done; (exit \$ec)
        DEVCONTAINER_TAG: ${{ parameters.DEVCONTAINER_TAG }}
        CI_CACHE_ACR_NAME: ${{ parameters.CI_CACHE_ACR_NAME}}
        AZURE_CREDENTIALS: ${{ parameters.AZURE_CREDENTIALS }}
        AZURE_ENVIRONMENT: ${{ parameters.AZURE_ENVIRONMENT }}
        ACR_NAME: ${{ parameters.ACR_NAME }}
        API_CLIENT_ID: "${{ parameters.API_CLIENT_ID }}"
        AAD_TENANT_ID: "${{ parameters.AAD_TENANT_ID }}"
        TEST_APP_ID: "${{ parameters.TEST_APP_ID }}"
        TEST_ACCOUNT_CLIENT_ID: "${{ parameters.TEST_ACCOUNT_CLIENT_ID }}"
        TEST_ACCOUNT_CLIENT_SECRET: "${{ parameters.TEST_ACCOUNT_CLIENT_SECRET }}"
        TRE_ID: ${{ parameters.TRE_ID }}
        LOCATION: ${{ parameters.LOCATION }}
        SUBSCRIPTION_ID: ${{ parameters.SUBSCRIPTION_ID }}
        BUNDLE_TYPE: $(BUNDLE_TYPE)

- job: register_user_resource_bundles
  displayName: Register user resource bundles
  dependsOn: [register_bundles, publish_bundles, deploy_tre]
  pool:
    vmImage: ubuntu-latest
  strategy:
    matrix:
      ${{ each bundle in parameters.USER_RESOURCE_BUNDLES }}:
        ${{ bundle.BUNDLE_NAME }}:
          BUNDLE_DIR: ${{ bundle.BUNDLE_DIR }}
          BUNDLE_TYPE: ${{ bundle.BUNDLE_TYPE }}
          BUNDLE_NAME: ${{ bundle.BUNDLE_NAME }}
          WORKSPACE_SERVICE_NAME: ${{ bundle.WORKSPACE_SERVICE_NAME }}
  steps:
    - checkout: self
      clean: "true"
      persistCredentials: "false"

    - template: devcontainer_run_command.yml
      parameters:
        DISPLAY_NAME: 'Register user resource bundles - $(BUNDLE_NAME)'
        COMMAND: >-
          for i in {1..3}; do make bundle-register DIR=$(BUNDLE_DIR)
          && ec=0 && break || ec=\$? && sleep 10; done; (exit \$ec)
        DEVCONTAINER_TAG: ${{ parameters.DEVCONTAINER_TAG }}
        CI_CACHE_ACR_NAME: ${{ parameters.CI_CACHE_ACR_NAME}}
        AZURE_CREDENTIALS: ${{ parameters.AZURE_CREDENTIALS }}
        AZURE_ENVIRONMENT: ${{ parameters.AZURE_ENVIRONMENT }}
        ACR_NAME: ${{ parameters.ACR_NAME }}
        API_CLIENT_ID: "${{ parameters.API_CLIENT_ID }}"
        AAD_TENANT_ID: "${{ parameters.AAD_TENANT_ID }}"
        TEST_APP_ID: "${{ parameters.TEST_APP_ID }}"
        TEST_ACCOUNT_CLIENT_ID: "${{ parameters.TEST_ACCOUNT_CLIENT_ID }}"
        TEST_ACCOUNT_CLIENT_SECRET: "${{ parameters.TEST_ACCOUNT_CLIENT_SECRET }}"
        TRE_ID: ${{ parameters.TRE_ID }}
        LOCATION: ${{ parameters.LOCATION }}
        SUBSCRIPTION_ID: ${{ parameters.SUBSCRIPTION_ID }}
        BUNDLE_TYPE: $(BUNDLE_TYPE)
        WORKSPACE_SERVICE_NAME: $(WORKSPACE_SERVICE_NAME)

- job: deploy_shared_services
  displayName: Deploy shared services
  dependsOn: [register_shared_bundles, deploy_tre]
  pool:
    vmImage: ubuntu-latest
  steps:
    - checkout: self
      clean: "true"
      persistCredentials: "false"

    - template: devcontainer_run_command.yml
      parameters:
        DISPLAY_NAME: 'Deploy firewall'
        COMMAND: "make deploy-shared-service DIR=./templates/shared_services/firewall/ BUNDLE_TYPE=shared_service"
        DEVCONTAINER_TAG: ${{ parameters.DEVCONTAINER_TAG }}
        CI_CACHE_ACR_NAME: ${{ parameters.CI_CACHE_ACR_NAME}}
        AZURE_CREDENTIALS: ${{ parameters.AZURE_CREDENTIALS }}
        AZURE_ENVIRONMENT: ${{ parameters.AZURE_ENVIRONMENT }}
        API_CLIENT_ID: "${{ parameters.API_CLIENT_ID }}"
        AAD_TENANT_ID: "${{ parameters.AAD_TENANT_ID }}"
        TEST_APP_ID: "${{ parameters.TEST_APP_ID }}"
        TEST_ACCOUNT_CLIENT_ID: "${{ parameters.TEST_ACCOUNT_CLIENT_ID }}"
        TEST_ACCOUNT_CLIENT_SECRET: "${{ parameters.TEST_ACCOUNT_CLIENT_SECRET }}"
        TRE_ID: ${{ parameters.TRE_ID }}
        LOCATION: ${{ parameters.LOCATION }}
        SUBSCRIPTION_ID: ${{ parameters.SUBSCRIPTION_ID }}

    - template: devcontainer_run_command.yml
      parameters:
        DISPLAY_NAME: 'State Store Migrations'
        COMMAND: "make db-migrate"
        DEVCONTAINER_TAG: ${{ parameters.DEVCONTAINER_TAG }}
        CI_CACHE_ACR_NAME: ${{ parameters.CI_CACHE_ACR_NAME}}
        AZURE_CREDENTIALS: ${{ parameters.AZURE_CREDENTIALS }}
        AZURE_ENVIRONMENT: ${{ parameters.AZURE_ENVIRONMENT }}
        API_CLIENT_ID: "${{ parameters.API_CLIENT_ID }}"
        AAD_TENANT_ID: "${{ parameters.AAD_TENANT_ID }}"
        TEST_APP_ID: "${{ parameters.TEST_APP_ID }}"
        TEST_ACCOUNT_CLIENT_ID: "${{ parameters.TEST_ACCOUNT_CLIENT_ID }}"
        TEST_ACCOUNT_CLIENT_SECRET: "${{ parameters.TEST_ACCOUNT_CLIENT_SECRET }}"
        TRE_ID: ${{ parameters.TRE_ID }}
        LOCATION: ${{ parameters.LOCATION }}
        TERRAFORM_STATE_CONTAINER_NAME: ${{ parameters.TERRAFORM_STATE_CONTAINER_NAME }}
        MGMT_RESOURCE_GROUP_NAME: ${{ parameters.MGMT_RESOURCE_GROUP_NAME }}
        MGMT_STORAGE_ACCOUNT_NAME: ${{ parameters.MGMT_STORAGE_ACCOUNT_NAME }}
        SUBSCRIPTION_ID: ${{ parameters.SUBSCRIPTION_ID }}

- job: deploy_ui
  displayName: Deploy UI
  dependsOn: [deploy_tre]
  pool:
    vmImage: ubuntu-latest
  steps:
    - checkout: self
      clean: "true"
      persistCredentials: "false"

    - template: devcontainer_run_command.yml
      parameters:
        DISPLAY_NAME: 'Deploy UI'
        COMMAND: "make build-and-deploy-ui"
        DEVCONTAINER_TAG: ${{ parameters.DEVCONTAINER_TAG }}
        CI_CACHE_ACR_NAME: ${{ parameters.CI_CACHE_ACR_NAME}}
        AZURE_CREDENTIALS: ${{ parameters.AZURE_CREDENTIALS }}
        AZURE_ENVIRONMENT: ${{ parameters.AZURE_ENVIRONMENT }}
        API_CLIENT_ID: "${{ parameters.API_CLIENT_ID }}"
        AAD_TENANT_ID: "${{ parameters.AAD_TENANT_ID }}"
        TRE_ID: ${{ parameters.TRE_ID }}
        LOCATION: ${{ parameters.LOCATION }}
        TERRAFORM_STATE_CONTAINER_NAME: ${{ parameters.TERRAFORM_STATE_CONTAINER_NAME }}
        MGMT_RESOURCE_GROUP_NAME: ${{ parameters.MGMT_RESOURCE_GROUP_NAME }}
        MGMT_STORAGE_ACCOUNT_NAME: ${{ parameters.MGMT_STORAGE_ACCOUNT_NAME }}
        SWAGGER_UI_CLIENT_ID: "${{ parameters.SWAGGER_UI_CLIENT_ID }}"
        SUBSCRIPTION_ID: ${{ parameters.SUBSCRIPTION_ID }}

- job: e2e_tests_smoke
  displayName: Run E2E Tests (Smoke)
  dependsOn: [deploy_shared_services, register_bundles, deploy_ui]
  pool:
    vmImage: ubuntu-latest
  timeoutInMinutes: "10"
  steps:
    - checkout: self
      clean: "true"
      persistCredentials: "false"

    - template: devcontainer_run_command.yml
      parameters:
        DISPLAY_NAME: 'Run E2E Tests (Smoke)'
        COMMAND: "make test-e2e-smoke"
        DEVCONTAINER_TAG: ${{ parameters.DEVCONTAINER_TAG }}
        CI_CACHE_ACR_NAME: ${{ parameters.CI_CACHE_ACR_NAME}}
        AZURE_CREDENTIALS: ${{ parameters.AZURE_CREDENTIALS }}
        AZURE_ENVIRONMENT: ${{ parameters.AZURE_ENVIRONMENT }}
        LOCATION: ${{ parameters.LOCATION }}
        API_CLIENT_ID: "${{ parameters.API_CLIENT_ID }}"
        AAD_TENANT_ID: "${{ parameters.AAD_TENANT_ID }}"
        TEST_APP_ID: "${{ parameters.TEST_APP_ID }}"
        TEST_WORKSPACE_APP_ID: "${{ parameters.TEST_WORKSPACE_APP_ID }}"
        TEST_WORKSPACE_APP_SECRET: "${{ parameters.TEST_WORKSPACE_APP_SECRET }}"
        TEST_ACCOUNT_CLIENT_ID: "${{ parameters.TEST_ACCOUNT_CLIENT_ID }}"
        TEST_ACCOUNT_CLIENT_SECRET: "${{ parameters.TEST_ACCOUNT_CLIENT_SECRET }}"
        TRE_ID: ${{ parameters.TRE_ID }}
        IS_API_SECURED: false
        WORKSPACE_APP_SERVICE_PLAN_SKU: ${{ parameters.WORKSPACE_APP_SERVICE_PLAN_SKU }}
        SUBSCRIPTION_ID: ${{ parameters.SUBSCRIPTION_ID }}

    - publish: "./e2e_tests/pytest_e2e_smoke.xml"
      artifact: E2E Test (Smoke) Results
      displayName: Upload Test Results
      condition: succeededOrFailed()

- job: e2e_tests_custom
  displayName: Run E2E Tests (Custom)
  condition: ne(variables['parameters.e2eTestsCustomSelector'], '')
  dependsOn: [deploy_shared_services, register_bundles, register_user_resource_bundles]
  pool:
    vmImage: ubuntu-latest
  timeoutInMinutes: "300"
  steps:
    - checkout: self
      clean: "true"
      persistCredentials: "false"

    - template: devcontainer_run_command.yml
      parameters:
        DISPLAY_NAME: 'Run E2E Tests (Custom)'
        COMMAND: "make test-e2e-custom SELECTOR='${{ parameters.e2eTestsCustomSelector }}'"
        DEVCONTAINER_TAG: ${{ parameters.DEVCONTAINER_TAG }}
        CI_CACHE_ACR_NAME: ${{ parameters.CI_CACHE_ACR_NAME}}
        AZURE_CREDENTIALS: ${{ parameters.AZURE_CREDENTIALS }}
        AZURE_ENVIRONMENT: ${{ parameters.AZURE_ENVIRONMENT }}
        LOCATION: ${{ parameters.LOCATION }}
        API_CLIENT_ID: "${{ parameters.API_CLIENT_ID }}"
        AAD_TENANT_ID: "${{ parameters.AAD_TENANT_ID }}"
        TEST_APP_ID: "${{ parameters.TEST_APP_ID }}"
        TEST_WORKSPACE_APP_ID: "${{ parameters.TEST_WORKSPACE_APP_ID }}"
        TEST_WORKSPACE_APP_SECRET: "${{ parameters.TEST_WORKSPACE_APP_SECRET }}"
        TEST_ACCOUNT_CLIENT_ID: "${{ parameters.TEST_ACCOUNT_CLIENT_ID }}"
        TEST_ACCOUNT_CLIENT_SECRET: "${{ parameters.TEST_ACCOUNT_CLIENT_SECRET }}"
        TRE_ID: ${{ parameters.TRE_ID }}
        IS_API_SECURED: false
        WORKSPACE_APP_SERVICE_PLAN_SKU: ${{ parameters.WORKSPACE_APP_SERVICE_PLAN_SKU }}
        E2E_TESTS_NUMBER_PROCESSES: ${{ parameters.E2E_TESTS_NUMBER_PROCESSES }}
        SUBSCRIPTION_ID: ${{ parameters.SUBSCRIPTION_ID }}

    - publish: "./e2e_tests/pytest_e2e_custom.xml"
      artifact: E2E Test (Smoke) Results
      displayName: Upload Test Results
      condition: succeededOrFailed()
